var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.488,1,2.012]],["body/controllers/AppController.html",[0,2.365,1,3.197,2,1.878,3,0.346,4,0.294,5,0.294,6,3.3,7,0.515,8,1.979,9,4.774,10,1.443,11,0.033,12,0.857,13,3.962,14,1.443,15,1.816,16,0.503,17,0.938,18,2.844,19,3.3,20,0.346,21,0.057,22,2.063,23,2.865,24,1.572,25,3.962,26,0.026,27,0.026]],["title/modules/AppModule.html",[28,1.634,29,2.012]],["body/modules/AppModule.html",[1,3.231,2,2.123,3,0.293,4,0.249,5,0.249,11,0.033,16,0.582,17,0.795,18,3.003,19,2.795,20,0.293,21,0.048,26,0.023,27,0.023,28,2.802,29,3.833,30,1.747,31,2.333,32,2.795,33,2.795,34,2.795,35,3.225,36,2.871,37,2.151,38,2.151,39,3.355,40,0.436,41,4.478,42,3.238,43,3.238,44,3.355,45,2.426,46,2.151,47,3.355,48,1.931,49,3.355,50,3.355]],["title/injectables/AppService.html",[18,1.634,51,0.812]],["body/injectables/AppService.html",[3,0.364,4,0.309,5,0.309,7,0.542,8,2.043,9,4.861,11,0.032,12,0.902,14,1.518,15,1.875,16,0.421,17,0.988,18,2.682,20,0.364,21,0.06,24,1.654,26,0.026,27,0.026,51,1.332,52,1.976,53,3.473,54,4.169,55,4.169,56,4.169]],["title/entities/Doctor.html",[57,1.634,58,1.634]],["body/entities/Doctor.html",[3,0.218,4,0.185,5,0.185,7,0.324,10,2.022,11,0.033,12,1.202,15,2.096,16,0.252,20,0.218,21,0.036,26,0.019,27,0.019,40,0.682,57,2.462,58,2.462,59,1.804,60,2.079,61,1.218,62,4.187,63,4.187,64,4.187,65,1.681,66,4.187,67,4.187,68,4.187,69,1.095,70,2.022,71,4.373,72,2.495,73,2.495,74,2.495,75,2.495,76,3.109,77,2.495,78,2.495,79,2.495,80,2.495,81,1.3]],["title/classes/DoctorDTO.html",[21,0.045,82,2.269]],["body/classes/DoctorDTO.html",[3,0.179,4,0.152,5,0.152,7,0.266,10,1.906,11,0.033,12,1.162,15,2.107,16,0.317,20,0.179,21,0.045,26,0.016,27,0.016,40,0.68,61,1.05,62,4.226,63,4.226,64,4.226,65,1.277,66,4.226,67,4.226,68,4.226,69,1.058,70,1.143,82,3.096,83,0.812,84,1.705,85,2.597,86,3.785,87,5.89,88,3.775,89,2.047,90,2.047,91,2.047,92,2.047,93,2.047,94,3.139,95,2.047,96,2.047,97,2.047,98,2.047,99,3.44,100,1.178,101,1.48,102,3.355]],["title/classes/HttpExceptionFilter.html",[21,0.045,103,2.269]],["body/classes/HttpExceptionFilter.html",[3,0.26,4,0.221,5,0.221,7,0.387,8,1.639,11,0.033,12,0.645,14,1.085,16,0.417,17,0.706,20,0.26,21,0.043,26,0.021,27,0.021,40,0.537,69,0.587,83,1.182,103,2.987,104,3.441,105,3.441,106,2.482,107,4.13,108,5.12,109,4.13,110,2.987,111,4.741,112,4.48,113,4.13,114,4.023,115,5.12,116,5.12,117,2.979,118,1.412,119,1.182,120,1.412,121,2.979,122,4.13,123,2.218,124,2.482,125,2.979,126,1.789,127,3.702,128,2.979,129,2.979,130,2.979,131,2.979,132,2.377,133,2.979,134,2.979,135,2.979,136,2.979,137,2.979,138,2.979,139,1.714,140,2.979,141,2.979,142,2.979]],["title/injectables/JwtAuthGard.html",[51,0.812,143,2.269]],["body/injectables/JwtAuthGard.html",[3,0.36,4,0.306,5,0.306,11,0.033,16,0.516,17,0.978,20,0.36,21,0.059,26,0.026,27,0.026,40,0.537,51,1.324,52,1.958,143,3.702,144,3.44,145,3.44,146,5.119,147,5.119,148,4.13,149,2.647,150,1.504,151,1.639,152,1.639,153,2.647,154,4.13]],["title/interfaces/JwtPayload.html",[155,1.634,156,1.806]],["body/interfaces/JwtPayload.html",[3,0.371,4,0.315,5,0.315,7,0.552,11,0.032,15,2.139,20,0.371,26,0.027,27,0.027,40,0.552,61,1.742,69,0.838,155,2.213,156,3.243,157,3.073,158,3.54,159,3.54,160,3.864,161,4.25]],["title/injectables/JwtStrategy.html",[51,0.812,162,2.269]],["body/injectables/JwtStrategy.html",[3,0.234,4,0.199,5,0.199,7,0.348,8,1.521,11,0.033,12,0.829,14,1.395,16,0.521,17,0.634,20,0.234,21,0.038,22,1.395,24,1.063,26,0.02,27,0.02,40,0.581,51,0.991,52,1.27,69,0.756,112,2.231,114,1.937,118,1.817,119,1.521,120,1.817,123,2.116,126,1.66,139,1.541,149,1.717,150,0.975,151,1.063,152,1.063,153,1.717,156,2.811,160,1.717,162,3.532,163,2.231,164,3.236,165,3.832,166,1.937,167,2.678,168,2.544,169,2.678,170,2.205,171,3.832,172,5.168,173,3.832,174,2.678,175,5.376,176,3.832,177,2.678,178,1.717,179,2.678,180,2.678,181,2.678,182,2.231,183,2.771,184,2.231,185,1.937,186,2.678,187,2.678,188,2.678,189,2.231,190,2.678,191,2.678,192,1.717,193,2.678,194,2.678,195,2.678,196,1.937,197,2.678,198,2.678]],["title/classes/LoginDTO.html",[21,0.045,199,2.012]],["body/classes/LoginDTO.html",[3,0.289,4,0.246,5,0.246,7,0.431,10,1.618,11,0.033,12,0.962,15,2.172,16,0.335,20,0.289,21,0.064,26,0.023,27,0.023,40,0.431,61,1.486,69,0.876,83,1.316,86,3.214,88,3.579,99,3.213,100,1.909,102,2.849,150,1.208,151,1.316,152,1.316,160,3.683,199,3.432,200,2.763,201,4.244,202,3.317,203,4.46,204,3.317,205,3.317,206,2.763,207,3.317]],["title/interfaces/Response.html",[123,1.359,155,1.634]],["body/interfaces/Response.html",[3,0.284,4,0.242,5,0.242,7,0.423,11,0.034,14,1.185,16,0.501,17,0.771,20,0.383,21,0.047,24,1.292,26,0.023,27,0.023,40,0.423,51,1.135,61,1.468,69,0.642,110,2.354,123,2.403,126,1.901,155,1.696,157,2.354,208,2.354,209,4.136,210,4.866,211,4.136,212,3.656,213,4.136,214,4.136,215,3.656,216,2.354,217,2.712,218,2.712,219,2.813,220,2.712,221,3.656,222,2.712,223,2.712]],["title/injectables/ResponseInterceptor.html",[51,0.812,219,2.012]],["body/injectables/ResponseInterceptor.html",[3,0.268,4,0.228,5,0.228,7,0.399,8,1.675,11,0.033,12,0.665,14,1.537,16,0.486,17,0.728,20,0.368,21,0.044,24,1.219,26,0.022,27,0.022,40,0.548,51,1.091,52,1.457,69,0.606,110,2.222,118,1.457,119,1.219,120,1.457,123,2.247,126,1.828,155,1.6,208,2.222,209,4.015,210,4.015,211,2.56,212,3.515,213,4.68,214,4.68,215,4.015,216,2.222,217,2.56,218,2.56,219,3.325,220,3.515,221,4.322,222,3.515,223,2.56,224,4.22,225,3.073]],["title/classes/Slots.html",[21,0.045,226,1.245]],["body/classes/Slots.html",[3,0.247,4,0.21,5,0.21,7,0.368,10,1.923,11,0.033,12,1.143,15,2.258,16,0.286,20,0.247,21,0.041,26,0.021,27,0.021,40,0.368,57,2.078,58,2.75,61,1.334,65,1.766,69,1.041,70,1.453,71,4.223,76,3.338,81,1.476,83,1.125,132,3.038,226,1.988,227,2.361,228,3.846,229,3.846,230,2.834,231,3.989,232,2.834,233,3.989,234,5.01,235,2.834,236,3.323,237,2.834,238,3.323,239,2.834]],["title/controllers/SlotsController.html",[0,1.488,240,2.012]],["body/controllers/SlotsController.html",[0,1.701,2,1.16,3,0.214,4,0.182,5,0.182,7,0.318,8,1.424,10,1.307,11,0.033,12,0.777,14,1.705,16,0.503,17,0.58,20,0.214,21,0.035,22,1.274,23,1.769,24,1.424,26,0.018,27,0.018,40,0.552,65,1.566,69,0.708,70,1.705,118,1.701,119,1.424,120,1.701,126,2.028,132,2.999,170,1.408,178,1.568,226,1.424,240,3.001,241,2.038,242,2.99,243,2.99,244,2.038,245,2.446,246,2.447,247,2.301,248,2.447,249,3.001,250,2.447,251,2.447,252,2.99,253,3.589,254,2.301,255,3.901,256,3.901,257,2.038,258,2.038,259,2.038,260,2.301,261,2.447,262,2.447,263,3.541,264,2.597,265,2.038,266,3.589,267,3.589,268,2.038,269,2.447,270,2.038,271,1.769,272,2.447,273,2.038,274,2.447,275,2.447,276,2.038,277,2.447,278,2.447,279,2.447,280,2.447,281,2.447,282,2.447,283,2.447,284,2.447,285,2.447,286,2.447,287,2.447,288,2.447,289,2.447,290,2.447]],["title/classes/SlotsDTO.html",[21,0.045,245,1.806]],["body/classes/SlotsDTO.html",[3,0.227,4,0.193,5,0.193,7,0.339,10,1.757,11,0.033,12,1.107,15,2.203,16,0.263,20,0.227,21,0.054,26,0.019,27,0.019,40,0.339,58,2.775,61,1.257,65,1.71,69,1.161,70,1.369,83,1.034,88,3.603,99,3.278,100,1.5,102,3.092,132,3.065,226,1.491,228,4.438,229,4.438,236,3.131,245,2.163,291,2.172,292,3.758,293,4.824,294,2.607,295,2.607,296,2.607,297,2.607,298,2.607,299,5.114,300,4.824]],["title/modules/SlotsModule.html",[28,1.634,48,1.806]],["body/modules/SlotsModule.html",[2,2.118,3,0.292,4,0.248,5,0.248,11,0.033,16,0.581,17,0.792,20,0.292,21,0.048,26,0.023,27,0.023,28,2.797,30,2.621,31,2.327,36,2.863,37,2.142,38,2.142,40,0.434,42,3.23,43,2.417,45,2.417,46,2.142,48,3.314,85,1.585,150,1.217,151,1.326,152,1.326,226,1.326,240,3.225,264,3,265,2.784,301,2.784,302,2.784,303,3.342,304,3.721,305,3.721,306,1.923,307,2.784,308,2.784,309,3.342,310,3.342]],["title/classes/SlotsRepository.html",[21,0.045,306,1.806]],["body/classes/SlotsRepository.html",[3,0.366,4,0.311,5,0.311,11,0.033,16,0.521,20,0.366,21,0.06,26,0.027,27,0.027,40,0.544,81,2.182,83,1.662,153,3.31,226,2.222,306,2.972,308,3.49,311,3.49,312,4.341,313,3.49,314,4.189]],["title/injectables/SlotsService.html",[51,0.812,264,1.634]],["body/injectables/SlotsService.html",[3,0.196,4,0.167,5,0.167,7,0.292,8,1.337,11,0.033,12,0.972,14,1.227,16,0.453,17,0.532,20,0.196,21,0.032,22,1.17,24,1.337,26,0.017,27,0.017,40,0.583,51,0.871,52,1.065,61,1.126,65,1.126,69,0.797,70,1.635,118,1.916,119,1.604,120,1.916,123,1.751,126,1.751,127,3.479,139,2.906,150,0.818,151,0.891,152,0.891,164,3.652,166,1.624,170,1.938,192,2.159,196,3.247,226,2.004,242,2.806,243,2.806,244,1.871,245,2.768,247,2.159,249,1.44,252,2.806,254,2.159,257,1.871,260,1.44,264,2.339,276,1.871,306,2.906,307,1.871,315,1.871,316,4.208,317,2.246,318,3.368,319,4.041,320,2.246,321,2.246,322,2.806,323,1.624,324,1.624,325,3.368,326,1.871,327,1.871,328,1.624,329,2.246,330,2.806,331,2.246,332,2.806,333,2.246,334,2.806,335,2.246,336,2.246,337,2.806,338,2.806,339,2.246,340,2.246,341,2.246,342,2.246,343,2.246,344,2.246,345,1.871,346,1.871]],["title/entities/Users.html",[57,1.634,85,1.488]],["body/entities/Users.html",[3,0.232,4,0.198,5,0.198,7,0.346,10,2.096,11,0.033,12,1.246,15,2.058,16,0.385,20,0.232,21,0.038,26,0.02,27,0.02,57,1.987,58,1.387,59,1.925,61,1.276,65,1.491,69,1.135,70,2.058,71,4.356,76,3.225,81,1.387,85,1.809,119,1.77,160,2.859,201,3.225,347,2.218,348,3.715,349,4.295,350,3.715,351,3.715,352,3.715,353,2.662,354,4.46,355,2.662,356,3.816,357,4.871,358,2.662,359,2.662,360,2.662,361,2.662,362,2.662,363,2.662,364,2.662,365,2.662,366,2.662,367,3.816]],["title/controllers/UsersController.html",[0,1.488,368,2.012]],["body/controllers/UsersController.html",[0,2.434,2,1.422,3,0.262,4,0.223,5,0.223,7,0.39,8,1.647,10,1.092,11,0.033,12,0.649,14,1.511,16,0.518,17,0.71,20,0.262,21,0.043,22,1.562,23,2.169,24,1.19,26,0.021,27,0.021,40,0.539,65,1.717,69,0.591,70,1.87,118,1.422,119,1.19,120,1.422,126,2.061,132,2.388,150,1.092,151,1.19,152,1.19,170,1.726,178,1.922,254,1.922,255,3.457,256,3.457,258,2.499,259,2.499,263,3.457,268,2.499,270,2.499,271,2.169,273,2.499,328,2.169,368,2.66,369,2.499,370,2.388,371,3.457,372,2.499,373,3.001,374,2.66,375,2.999,376,2.999,377,2.808,378,2.499,379,2.999,380,2.999,381,2.999,382,2.999,383,2.999]],["title/classes/UsersDTO.html",[21,0.045,384,2.012]],["body/classes/UsersDTO.html",[3,0.21,4,0.179,5,0.179,7,0.313,10,1.951,11,0.033,12,1.215,15,2.002,16,0.243,20,0.21,21,0.051,26,0.018,27,0.018,61,1.186,65,1.408,69,1.107,70,2.002,83,0.955,86,3.874,88,3.753,99,3.524,100,1.385,102,3.434,119,2.227,201,3.581,203,2.954,206,2.954,348,4.125,349,4.125,350,4.125,351,4.125,352,4.125,370,2.04,384,2.273,385,2.005,386,4.21,387,2.406,388,2.406,389,2.406,390,2.406,391,5.497,392,2.406,393,2.406,394,2.406,395,2.406,396,2.406,397,2.406,398,2.406,399,3.545]],["title/modules/UsersModule.html",[28,1.634,35,1.806]],["body/modules/UsersModule.html",[2,1.967,3,0.262,4,0.223,5,0.223,11,0.033,16,0.588,17,0.71,20,0.262,21,0.043,26,0.021,27,0.021,28,2.674,30,2.478,31,2.161,35,3.208,36,2.66,37,1.922,38,1.922,40,0.39,42,3.001,43,2.169,45,2.169,46,1.922,85,1.967,101,2.169,149,1.922,150,1.092,151,1.19,152,1.19,168,2.161,183,2.169,185,2.169,189,2.499,304,3.457,305,3.457,368,3.05,377,2.904,378,2.499,400,2.499,401,2.499,402,2.999,403,2.999,404,2.169,405,2.999,406,2.999,407,2.999,408,2.999,409,2.999,410,2.999,411,2.999,412,2.999,413,2.999,414,2.999,415,2.999]],["title/classes/UsersRepository.html",[21,0.045,168,1.634]],["body/classes/UsersRepository.html",[3,0.359,4,0.305,5,0.305,11,0.033,16,0.515,20,0.359,21,0.059,26,0.026,27,0.026,40,0.534,81,2.141,83,1.631,85,1.949,101,2.972,150,1.497,151,1.631,152,1.631,153,3.272,168,2.659,312,4.318,313,3.424,370,2.937,416,3.424,417,4.11]],["title/injectables/UsersService.html",[51,0.812,377,1.634]],["body/injectables/UsersService.html",[3,0.207,4,0.176,5,0.176,7,0.308,8,1.39,11,0.033,12,0.902,14,0.862,16,0.552,17,0.561,20,0.207,21,0.034,22,1.233,24,0.939,26,0.018,27,0.018,40,0.542,51,0.906,52,1.122,61,1.171,65,1.171,69,0.691,70,1.678,114,1.712,118,1.661,119,1.39,120,1.661,123,1.517,126,1.806,127,2.533,139,2.652,150,0.862,151,0.939,152,0.939,156,1.362,164,3.015,166,1.712,168,2.682,170,2.016,178,1.517,184,1.972,185,1.712,192,1.517,196,2.533,199,1.517,254,1.517,316,4.29,323,1.712,324,1.712,326,1.972,327,1.972,328,1.712,330,1.972,332,1.972,334,1.972,337,1.972,338,1.972,345,1.972,346,1.972,370,2.016,371,2.918,372,1.972,374,1.517,377,1.824,384,1.517,404,1.712,418,1.972,419,3.503,420,2.367,421,5.684,422,3.503,423,4.17,424,2.367,425,2.918,426,3.503,427,3.503,428,2.367,429,2.367,430,1.972,431,1.972,432,1.712,433,1.712,434,1.712,435,1.712,436,1.712,437,2.367,438,2.367,439,2.367,440,2.367,441,2.367,442,2.367,443,2.367]],["title/coverage.html",[444,3.096]],["body/coverage.html",[0,1.91,1,1.432,5,0.166,6,1.862,11,0.033,18,1.164,21,0.077,26,0.017,27,0.017,51,1.304,53,1.862,57,1.748,58,1.164,60,1.862,69,0.441,82,1.616,84,1.862,85,1.059,103,1.616,104,1.862,105,1.862,106,1.862,123,0.968,139,1.286,143,1.616,144,1.862,145,1.862,155,1.748,156,1.286,158,1.862,159,1.862,162,1.616,163,1.862,168,1.164,199,1.432,200,1.862,208,2.426,219,1.432,226,0.887,227,1.862,240,1.432,241,1.862,245,1.286,247,1.432,249,1.432,260,1.432,264,1.164,291,1.862,306,1.286,311,1.862,315,1.862,347,1.862,368,1.432,369,1.862,373,1.616,374,1.432,377,1.164,384,1.432,385,1.862,416,1.862,418,1.862,432,1.616,433,1.616,434,1.616,435,1.616,436,1.616,444,1.616,445,2.234,446,2.234,447,2.234,448,4.8,449,3.355,450,6.281,451,4.8,452,4.803,453,5.765,454,5.98,455,1.862,456,1.862,457,1.862,458,2.234,459,1.862,460,3.355,461,4.029,462,2.234,463,2.234,464,2.234,465,2.234,466,2.234,467,2.234,468,2.234,469,2.234,470,2.234]],["title/dependencies.html",[31,1.966,471,2.622]],["body/dependencies.html",[11,0.033,17,0.836,21,0.066,26,0.024,27,0.024,31,1.839,46,2.263,81,1.839,100,2.032,124,3.859,149,2.263,182,3.859,183,3.35,216,2.553,271,2.553,404,2.553,430,2.941,431,2.941,472,5.488,473,3.531,474,3.531,475,3.531,476,3.531,477,3.531,478,3.531,479,3.531,480,3.531,481,3.531,482,3.531,483,3.531,484,3.531,485,3.531,486,4.632,487,3.531,488,3.531,489,3.531,490,3.531,491,3.531,492,3.531,493,3.531,494,3.531,495,3.531,496,3.531,497,3.531,498,3.531,499,3.531,500,3.531]],["title/miscellaneous/functions.html",[501,1.68,502,3.144]],["body/miscellaneous/functions.html",[7,0.622,11,0.029,26,0.029,27,0.029,457,3.985,459,4.938,501,3.066,502,3.985,503,4.783]],["title/index.html",[7,0.341,504,2.622,505,2.622]],["body/index.html",[4,0.243,11,0.032,26,0.023,27,0.023,40,0.426,150,1.194,238,2.732,312,2.372,444,2.372,506,3.28,507,3.28,508,4.411,509,3.28,510,3.28,511,3.28,512,3.28,513,3.28,514,3.28,515,4.984,516,3.28,517,3.28,518,3.28,519,5.852,520,3.28,521,3.28,522,3.28,523,5.728,524,3.28,525,4.411,526,3.28,527,3.28,528,3.28,529,3.28,530,4.411,531,4.411,532,3.28,533,3.28,534,3.28,535,4.411,536,4.411,537,3.28,538,3.28,539,3.28,540,3.28,541,3.28,542,2.732,543,3.28,544,3.28,545,3.28,546,3.28,547,2.732,548,3.28,549,3.28,550,2.732,551,3.28,552,3.28,553,3.28,554,3.28,555,3.28,556,3.28,557,3.28,558,3.28,559,3.28]],["title/modules.html",[30,2.23]],["body/modules.html",[11,0.028,26,0.028,27,0.028,29,2.938,30,2.387,35,2.637,48,2.637,542,4.85,560,5.822,561,5.822,562,5.822]],["title/overview.html",[563,3.566]],["body/overview.html",[2,1.813,11,0.031,18,2.797,26,0.025,27,0.025,29,3.83,30,1.991,31,2.54,32,3.185,33,3.185,34,3.185,35,3.362,36,3.126,37,2.451,38,2.451,48,3.255,52,1.813,59,2.765,83,1.517,157,2.765,264,2.797,301,3.185,302,3.185,377,2.797,400,3.185,401,3.185,563,3.185,564,4.877,565,4.877,566,3.823,567,3.823]],["title/miscellaneous/variables.html",[501,1.68,568,3.144]],["body/miscellaneous/variables.html",[7,0.368,11,0.032,26,0.021,27,0.021,65,1.675,192,2.557,226,1.125,247,2.959,249,2.959,260,2.959,322,2.361,323,4.368,324,4.368,370,3.152,373,3.338,374,2.959,425,2.361,432,3.338,433,3.338,434,3.338,435,3.338,436,3.338,452,2.361,455,3.846,456,3.846,501,1.817,547,2.361,550,2.361,568,2.361,569,6.04,570,2.834,571,2.834,572,2.834,573,2.834,574,2.834,575,3.989,576,4.616,577,2.834,578,3.989,579,3.989,580,2.834,581,2.834,582,2.834,583,2.834,584,2.834,585,2.834,586,2.834,587,2.834,588,2.834,589,2.834,590,2.834]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["1062",{"_index":340,"title":{},"body":{"injectables/SlotsService.html":{}}}],["1d",{"_index":414,"title":{},"body":{"modules/UsersModule.html":{}}}],["2",{"_index":565,"title":{},"body":{"overview.html":{}}}],["2.3.3",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":564,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["4.13.1",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["5.0.1",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":566,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":567,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["add",{"_index":252,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{}}}],["added",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addslots",{"_index":242,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{}}}],["addslots(@body",{"_index":283,"title":{},"body":{"controllers/SlotsController.html":{}}}],["addslots(slots",{"_index":244,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{}}}],["addslots(slots:slotsdto):promise",{"_index":329,"title":{},"body":{"injectables/SlotsService.html":{}}}],["again",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["age",{"_index":348,"title":{},"body":{"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["already",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":543,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":266,"title":{},"body":{"controllers/SlotsController.html":{}}}],["apicreatedresponse({description",{"_index":246,"title":{},"body":{"controllers/SlotsController.html":{}}}],["apiinternalservererrorresponse",{"_index":267,"title":{},"body":{"controllers/SlotsController.html":{}}}],["apinotfoundresponse",{"_index":270,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse({description:no_bookings_available,status:httpstatus.internal_server_error",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse({description:slots_not_available,status:httpstatus.internal_server_error",{"_index":287,"title":{},"body":{"controllers/SlotsController.html":{}}}],["apiokresponse",{"_index":268,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse({description",{"_index":258,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse({description:booking_list,status:httpstatus.ok",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse({description:slot_conflict,status:httpstatus.ok",{"_index":286,"title":{},"body":{"controllers/SlotsController.html":{}}}],["apitags",{"_index":269,"title":{},"body":{"controllers/SlotsController.html":{}}}],["apitags('slots",{"_index":277,"title":{},"body":{"controllers/SlotsController.html":{}}}],["app",{"_index":521,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":514,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appmodule(root",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":116,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":164,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["auth.guard.ts",{"_index":145,"title":{},"body":{"injectables/JwtAuthGard.html":{},"coverage.html":{}}}],["authenticated",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication",{"_index":147,"title":{},"body":{"injectables/JwtAuthGard.html":{}}}],["authguard",{"_index":148,"title":{},"body":{"injectables/JwtAuthGard.html":{}}}],["authguard('jwt",{"_index":154,"title":{},"body":{"injectables/JwtAuthGard.html":{}}}],["author",{"_index":150,"title":{},"body":{"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"modules/SlotsModule.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["available",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":330,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":544,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcryptjs",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["benficiary",{"_index":253,"title":{},"body":{"controllers/SlotsController.html":{}}}],["benificiary",{"_index":263,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["benificiarydto",{"_index":278,"title":{},"body":{"controllers/SlotsController.html":{}}}],["body",{"_index":274,"title":{},"body":{"controllers/SlotsController.html":{}}}],["bokkings",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["booked",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["booking",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["booking_list",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bookinghistory",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bookinghistory(@param('id',parseintpipe)id:number):promise",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["bookinghistory(id",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bookinghistory(id:number):promise",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["bootstrap",{"_index":459,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":562,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":560,"title":{},"body":{"modules.html":{}}}],["building",{"_index":509,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":214,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["cant",{"_index":391,"title":{},"body":{"classes/UsersDTO.html":{}}}],["catch",{"_index":112,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{}}}],["catch(error",{"_index":337,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":113,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":125,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":21,"title":{"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDTO.html":{},"classes/Slots.html":{},"classes/SlotsDTO.html":{},"classes/SlotsRepository.html":{},"classes/UsersDTO.html":{},"classes/UsersRepository.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":83,"title":{},"body":{"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDTO.html":{},"classes/Slots.html":{},"classes/SlotsDTO.html":{},"classes/SlotsRepository.html":{},"classes/UsersDTO.html":{},"classes/UsersRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_slotsmodule",{"_index":301,"title":{},"body":{"modules/SlotsModule.html":{},"overview.html":{}}}],["cluster_slotsmodule_providers",{"_index":302,"title":{},"body":{"modules/SlotsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":400,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":401,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":71,"title":{},"body":{"entities/Doctor.html":{},"classes/Slots.html":{},"entities/Users.html":{}}}],["column({unique",{"_index":356,"title":{},"body":{"entities/Users.html":{}}}],["conflictexception",{"_index":326,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["conflictexception(msg",{"_index":336,"title":{},"body":{"injectables/SlotsService.html":{}}}],["conflictexception(slot_conflict",{"_index":341,"title":{},"body":{"injectables/SlotsService.html":{}}}],["const",{"_index":127,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["constant",{"_index":328,"title":{},"body":{"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":166,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(slotsrepo",{"_index":317,"title":{},"body":{"injectables/SlotsService.html":{}}}],["constructor(userrepo",{"_index":167,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersrepo",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["consultationfee",{"_index":62,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{}}}],["context",{"_index":220,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/SlotsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/SlotsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/SlotsController.html":{},"modules/SlotsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coustom",{"_index":107,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["coverage",{"_index":444,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdatecolumn",{"_index":354,"title":{},"body":{"entities/Users.html":{}}}],["credentials",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":128,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":131,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":130,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":210,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["date",{"_index":349,"title":{},"body":{"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["date().toisostring",{"_index":140,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/LoginDTO.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{}}}],["default",{"_index":323,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":408,"title":{},"body":{"modules/UsersModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":170,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["description:slot_add_success",{"_index":279,"title":{},"body":{"controllers/SlotsController.html":{}}}],["development",{"_index":522,"title":{},"body":{"index.html":{}}}],["doctor",{"_index":58,"title":{"entities/Doctor.html":{}},"body":{"entities/Doctor.html":{},"classes/Slots.html":{},"classes/SlotsDTO.html":{},"entities/Users.html":{},"coverage.html":{}}}],["doctordto",{"_index":82,"title":{"classes/DoctorDTO.html":{}},"body":{"classes/DoctorDTO.html":{},"coverage.html":{}}}],["doctors.entity",{"_index":366,"title":{},"body":{"entities/Users.html":{}}}],["documentation",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":292,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["e2e",{"_index":532,"title":{},"body":{"index.html":{}}}],["education",{"_index":63,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{}}}],["efficient",{"_index":510,"title":{},"body":{"index.html":{}}}],["email",{"_index":203,"title":{},"body":{"classes/LoginDTO.html":{},"classes/UsersDTO.html":{}}}],["emailid",{"_index":160,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"entities/Users.html":{}}}],["emailid:string",{"_index":161,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["empty",{"_index":88,"title":{},"body":{"classes/DoctorDTO.html":{},"classes/LoginDTO.html":{},"classes/SlotsDTO.html":{},"classes/UsersDTO.html":{}}}],["empty'})@isemail",{"_index":392,"title":{},"body":{"classes/UsersDTO.html":{}}}],["empty'})@isemail({messge",{"_index":202,"title":{},"body":{"classes/LoginDTO.html":{}}}],["empty'})@isnumber",{"_index":397,"title":{},"body":{"classes/UsersDTO.html":{}}}],["end",{"_index":233,"title":{},"body":{"classes/Slots.html":{}}}],["endtime",{"_index":228,"title":{},"body":{"classes/Slots.html":{},"classes/SlotsDTO.html":{}}}],["entities",{"_index":59,"title":{},"body":{"entities/Doctor.html":{},"entities/Users.html":{},"overview.html":{}}}],["entity",{"_index":57,"title":{"entities/Doctor.html":{},"entities/Users.html":{}},"body":{"entities/Doctor.html":{},"classes/Slots.html":{},"entities/Users.html":{},"coverage.html":{}}}],["entityrepository",{"_index":313,"title":{},"body":{"classes/SlotsRepository.html":{},"classes/UsersRepository.html":{}}}],["entityrepository(slots",{"_index":314,"title":{},"body":{"classes/SlotsRepository.html":{}}}],["entityrepository(users",{"_index":417,"title":{},"body":{"classes/UsersRepository.html":{}}}],["error",{"_index":195,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["exception",{"_index":108,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":106,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:15",{"_index":117,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":133,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception/http",{"_index":105,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exceptionfilter",{"_index":111,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":213,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["exist",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["experience",{"_index":64,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{}}}],["expiresin",{"_index":413,"title":{},"body":{"modules/UsersModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["express",{"_index":124,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":153,"title":{},"body":{"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"classes/SlotsRepository.html":{},"classes/UsersRepository.html":{}}}],["extractjwt",{"_index":180,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":191,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failure",{"_index":256,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["fastify",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["field",{"_index":300,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":109,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["formate",{"_index":134,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["found",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":508,"title":{},"body":{"index.html":{}}}],["function",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":502,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":350,"title":{},"body":{"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["get(':id/bookings",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/slots",{"_index":288,"title":{},"body":{"controllers/SlotsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":504,"title":{"index.html":{}},"body":{}}],["grow",{"_index":539,"title":{},"body":{"index.html":{}}}],["gupta",{"_index":152,"title":{},"body":{"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"modules/SlotsModule.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["hello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":550,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["history",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["host",{"_index":115,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":129,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":114,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["httpexception(error.message",{"_index":197,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["httpexceptionfilter",{"_index":103,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":556,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":178,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/SlotsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.created",{"_index":280,"title":{},"body":{"controllers/SlotsController.html":{}}}],["httpstatus.internal_server_error",{"_index":281,"title":{},"body":{"controllers/SlotsController.html":{}}}],["httpstatus.unauthorized",{"_index":198,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":65,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id:number",{"_index":94,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["identifier",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["if(error.errrno",{"_index":339,"title":{},"body":{"injectables/SlotsService.html":{}}}],["if(response",{"_index":332,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["implements",{"_index":110,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":304,"title":{},"body":{"modules/SlotsModule.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":51,"title":{"injectables/AppService.html":{},"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":518,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":520,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":224,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":222,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["interceptor",{"_index":209,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["interface",{"_index":155,"title":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":157,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid_credentials",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":206,"title":{},"body":{"classes/LoginDTO.html":{},"classes/UsersDTO.html":{}}}],["isemail({messge:'emailid",{"_index":207,"title":{},"body":{"classes/LoginDTO.html":{}}}],["isnotempty",{"_index":99,"title":{},"body":{"classes/DoctorDTO.html":{},"classes/LoginDTO.html":{},"classes/SlotsDTO.html":{},"classes/UsersDTO.html":{}}}],["isnotempty({message",{"_index":86,"title":{},"body":{"classes/DoctorDTO.html":{},"classes/LoginDTO.html":{},"classes/UsersDTO.html":{}}}],["isnumber",{"_index":399,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isstring",{"_index":299,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["isstring()@isnotempty({message",{"_index":293,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["join",{"_index":546,"title":{},"body":{"index.html":{}}}],["json",{"_index":136,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwt",{"_index":183,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwtauthgard",{"_index":143,"title":{"injectables/JwtAuthGard.html":{}},"body":{"injectables/JwtAuthGard.html":{},"coverage.html":{}}}],["jwtauthguard",{"_index":146,"title":{},"body":{"injectables/JwtAuthGard.html":{}}}],["jwtfromrequest",{"_index":190,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":403,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.registerasync",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtpayload",{"_index":156,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwtstrategy",{"_index":162,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["kamil",{"_index":553,"title":{},"body":{"index.html":{}}}],["later",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":559,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":536,"title":{},"body":{"index.html":{}}}],["list",{"_index":322,"title":{},"body":{"injectables/SlotsService.html":{},"miscellaneous/variables.html":{}}}],["listofslots",{"_index":243,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{}}}],["listofslots(@param('id',parseintpipe)id:number):promise",{"_index":289,"title":{},"body":{"controllers/SlotsController.html":{}}}],["listofslots(id",{"_index":257,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{}}}],["listofslots(id:number):promise",{"_index":342,"title":{},"body":{"injectables/SlotsService.html":{}}}],["location",{"_index":66,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{}}}],["log_in_success",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":316,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["logger(slotsservice.name",{"_index":325,"title":{},"body":{"injectables/SlotsService.html":{}}}],["logger(usersservice.name",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login.dto",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["logindto",{"_index":199,"title":{"classes/LoginDTO.html":{}},"body":{"classes/LoginDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["mailid",{"_index":386,"title":{},"body":{"classes/UsersDTO.html":{}}}],["map",{"_index":217,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":102,"title":{},"body":{"classes/DoctorDTO.html":{},"classes/LoginDTO.html":{},"classes/SlotsDTO.html":{},"classes/UsersDTO.html":{}}}],["metadata",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":501,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":535,"title":{},"body":{"index.html":{}}}],["mode",{"_index":525,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":549,"title":{},"body":{"index.html":{}}}],["msg",{"_index":334,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["msg:string",{"_index":333,"title":{},"body":{"injectables/SlotsService.html":{}}}],["msg:string=slot_conflict",{"_index":335,"title":{},"body":{"injectables/SlotsService.html":{}}}],["mysql2",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":554,"title":{},"body":{"index.html":{}}}],["name",{"_index":119,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":515,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":558,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":212,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"modules/SlotsModule.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":404,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":149,"title":{},"body":{"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":271,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":139,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["next",{"_index":221,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":223,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["no_bookings_available",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":507,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":327,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(error.message",{"_index":346,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(msg",{"_index":345,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["npm",{"_index":519,"title":{},"body":{"index.html":{}}}],["number",{"_index":70,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":215,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["onetoone",{"_index":365,"title":{},"body":{"entities/Users.html":{}}}],["open",{"_index":537,"title":{},"body":{"index.html":{}}}],["optional",{"_index":120,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":563,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":471,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":126,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parameters",{"_index":118,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":273,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["passport",{"_index":182,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":405,"title":{},"body":{"modules/UsersModule.html":{}}}],["passportmodule,jwtmodule,typeormmodule",{"_index":305,"title":{},"body":{"modules/SlotsModule.html":{},"modules/UsersModule.html":{}}}],["passportmodule.register",{"_index":407,"title":{},"body":{"modules/UsersModule.html":{}}}],["passportstrategy",{"_index":179,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":201,"title":{},"body":{"classes/LoginDTO.html":{},"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["path",{"_index":141,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":175,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.emailid",{"_index":194,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["payload.interface.ts",{"_index":159,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["phonenumber",{"_index":351,"title":{},"body":{"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["pk",{"_index":236,"title":{},"body":{"classes/Slots.html":{},"classes/SlotsDTO.html":{}}}],["please",{"_index":547,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":272,"title":{},"body":{"controllers/SlotsController.html":{}}}],["post(\"slots",{"_index":282,"title":{},"body":{"controllers/SlotsController.html":{}}}],["primarygeneratedcolumn",{"_index":76,"title":{},"body":{"entities/Doctor.html":{},"classes/Slots.html":{},"entities/Users.html":{}}}],["private",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["production",{"_index":527,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":506,"title":{},"body":{"index.html":{}}}],["project",{"_index":538,"title":{},"body":{"index.html":{}}}],["promise",{"_index":254,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":61,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"classes/Slots.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{}}}],["rashmi",{"_index":151,"title":{},"body":{"injectables/JwtAuthGard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"modules/SlotsModule.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["rating",{"_index":67,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{}}}],["read",{"_index":548,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registerd",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":312,"title":{},"body":{"classes/SlotsRepository.html":{},"classes/UsersRepository.html":{},"index.html":{}}}],["request",{"_index":122,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":142,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":123,"title":{"interfaces/Response.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["responseinterceptor",{"_index":219,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":523,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":216,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":218,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["scalable",{"_index":511,"title":{},"body":{"index.html":{}}}],["secret",{"_index":411,"title":{},"body":{"modules/UsersModule.html":{}}}],["secretorkey",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":512,"title":{},"body":{"index.html":{}}}],["service",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["shouldn't",{"_index":87,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["side",{"_index":513,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":412,"title":{},"body":{"modules/UsersModule.html":{}}}],["slot",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slot_add_success",{"_index":247,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slot_conflict",{"_index":249,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slots",{"_index":226,"title":{"classes/Slots.html":{}},"body":{"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slots.controller",{"_index":309,"title":{},"body":{"modules/SlotsModule.html":{}}}],["slots.dto",{"_index":276,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{}}}],["slots.entity",{"_index":308,"title":{},"body":{"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{}}}],["slots.repository",{"_index":307,"title":{},"body":{"modules/SlotsModule.html":{},"injectables/SlotsService.html":{}}}],["slots.service",{"_index":265,"title":{},"body":{"controllers/SlotsController.html":{},"modules/SlotsModule.html":{}}}],["slots/slots.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["slots_not_available",{"_index":260,"title":{},"body":{"controllers/SlotsController.html":{},"injectables/SlotsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slotscontroller",{"_index":240,"title":{"controllers/SlotsController.html":{}},"body":{"controllers/SlotsController.html":{},"modules/SlotsModule.html":{},"coverage.html":{}}}],["slotsdto",{"_index":245,"title":{"classes/SlotsDTO.html":{}},"body":{"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"coverage.html":{}}}],["slotsdto):promise",{"_index":284,"title":{},"body":{"controllers/SlotsController.html":{}}}],["slotsmodule",{"_index":48,"title":{"modules/SlotsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules.html":{},"overview.html":{}}}],["slotsrepo",{"_index":319,"title":{},"body":{"injectables/SlotsService.html":{}}}],["slotsrepository",{"_index":306,"title":{"classes/SlotsRepository.html":{}},"body":{"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"coverage.html":{}}}],["slotsservice",{"_index":264,"title":{"injectables/SlotsService.html":{}},"body":{"controllers/SlotsController.html":{},"modules/SlotsModule.html":{},"injectables/SlotsService.html":{},"coverage.html":{},"overview.html":{}}}],["sorry,this",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"modules/SlotsModule.html":{},"classes/SlotsRepository.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specialization",{"_index":68,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{}}}],["sponsors",{"_index":541,"title":{},"body":{"index.html":{}}}],["src/.../constant.ts",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/coustom",{"_index":104,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptor/response.interceptor.ts",{"_index":208,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/response.interceptor.ts:27",{"_index":225,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/constant",{"_index":275,"title":{},"body":{"controllers/SlotsController.html":{}}}],["src/constant.ts",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/slots/slots.controller.ts",{"_index":241,"title":{},"body":{"controllers/SlotsController.html":{},"coverage.html":{}}}],["src/slots/slots.controller.ts:28",{"_index":251,"title":{},"body":{"controllers/SlotsController.html":{}}}],["src/slots/slots.controller.ts:40",{"_index":262,"title":{},"body":{"controllers/SlotsController.html":{}}}],["src/slots/slots.dto.ts",{"_index":291,"title":{},"body":{"classes/SlotsDTO.html":{},"coverage.html":{}}}],["src/slots/slots.dto.ts:12",{"_index":296,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["src/slots/slots.dto.ts:20",{"_index":294,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["src/slots/slots.dto.ts:28",{"_index":297,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["src/slots/slots.dto.ts:36",{"_index":295,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["src/slots/slots.dto.ts:44",{"_index":298,"title":{},"body":{"classes/SlotsDTO.html":{}}}],["src/slots/slots.entity.ts",{"_index":227,"title":{},"body":{"classes/Slots.html":{},"coverage.html":{}}}],["src/slots/slots.entity.ts:12",{"_index":235,"title":{},"body":{"classes/Slots.html":{}}}],["src/slots/slots.entity.ts:18",{"_index":230,"title":{},"body":{"classes/Slots.html":{}}}],["src/slots/slots.entity.ts:24",{"_index":237,"title":{},"body":{"classes/Slots.html":{}}}],["src/slots/slots.entity.ts:30",{"_index":232,"title":{},"body":{"classes/Slots.html":{}}}],["src/slots/slots.entity.ts:36",{"_index":239,"title":{},"body":{"classes/Slots.html":{}}}],["src/slots/slots.module.ts",{"_index":303,"title":{},"body":{"modules/SlotsModule.html":{}}}],["src/slots/slots.repository.ts",{"_index":311,"title":{},"body":{"classes/SlotsRepository.html":{},"coverage.html":{}}}],["src/slots/slots.service.ts",{"_index":315,"title":{},"body":{"injectables/SlotsService.html":{},"coverage.html":{}}}],["src/slots/slots.service.ts:16",{"_index":318,"title":{},"body":{"injectables/SlotsService.html":{}}}],["src/slots/slots.service.ts:28",{"_index":320,"title":{},"body":{"injectables/SlotsService.html":{}}}],["src/slots/slots.service.ts:50",{"_index":321,"title":{},"body":{"injectables/SlotsService.html":{}}}],["src/users/doctors.dto.ts",{"_index":84,"title":{},"body":{"classes/DoctorDTO.html":{},"coverage.html":{}}}],["src/users/doctors.dto.ts:12",{"_index":93,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:18",{"_index":92,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:24",{"_index":91,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:30",{"_index":97,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:36",{"_index":90,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:42",{"_index":96,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:48",{"_index":89,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:54",{"_index":95,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.dto.ts:60",{"_index":98,"title":{},"body":{"classes/DoctorDTO.html":{}}}],["src/users/doctors.entity.ts",{"_index":60,"title":{},"body":{"entities/Doctor.html":{},"coverage.html":{}}}],["src/users/doctors.entity.ts:13",{"_index":77,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:19",{"_index":75,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:25",{"_index":74,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:31",{"_index":80,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:37",{"_index":73,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:43",{"_index":79,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:49",{"_index":72,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/doctors.entity.ts:55",{"_index":78,"title":{},"body":{"entities/Doctor.html":{}}}],["src/users/guards/jwt",{"_index":144,"title":{},"body":{"injectables/JwtAuthGard.html":{},"coverage.html":{}}}],["src/users/jwt/jwt",{"_index":158,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/users/jwt/jwt.strategy.ts",{"_index":163,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/users/jwt/jwt.strategy.ts:12",{"_index":169,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/jwt/jwt.strategy.ts:30",{"_index":174,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/login.dto.ts",{"_index":200,"title":{},"body":{"classes/LoginDTO.html":{},"coverage.html":{}}}],["src/users/login.dto.ts:14",{"_index":204,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/users/login.dto.ts:20",{"_index":205,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/users/users.controller.ts",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.dto.ts",{"_index":385,"title":{},"body":{"classes/UsersDTO.html":{},"coverage.html":{}}}],["src/users/users.dto.ts:12",{"_index":389,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:16",{"_index":387,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:20",{"_index":393,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:24",{"_index":396,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:28",{"_index":398,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:31",{"_index":395,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:33",{"_index":388,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:5",{"_index":390,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.dto.ts:8",{"_index":394,"title":{},"body":{"classes/UsersDTO.html":{}}}],["src/users/users.entity.ts",{"_index":347,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:11",{"_index":361,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:14",{"_index":359,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:17",{"_index":353,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:20",{"_index":358,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:23",{"_index":363,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:26",{"_index":364,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:30",{"_index":362,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:33",{"_index":355,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.entity.ts:8",{"_index":360,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.module.ts",{"_index":402,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository.ts",{"_index":416,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.service.ts",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:20",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssn",{"_index":352,"title":{},"body":{"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["start",{"_index":238,"title":{},"body":{"classes/Slots.html":{},"index.html":{}}}],["start:dev",{"_index":526,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":528,"title":{},"body":{"index.html":{}}}],["started",{"_index":505,"title":{"index.html":{}},"body":{}}],["starter",{"_index":517,"title":{},"body":{"index.html":{}}}],["starttime",{"_index":229,"title":{},"body":{"classes/Slots.html":{},"classes/SlotsDTO.html":{}}}],["statements",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":132,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"controllers/UsersController.html":{}}}],["status(status",{"_index":135,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":137,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":551,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":181,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"classes/Slots.html":{},"classes/SlotsDTO.html":{},"entities/Users.html":{},"classes/UsersDTO.html":{}}}],["string=`${no_bookings_available",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["string=`${slots_not_available",{"_index":344,"title":{},"body":{"injectables/SlotsService.html":{}}}],["succesfully",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success",{"_index":255,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["successfull",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":542,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":561,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":211,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{}}}],["table",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":531,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":534,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":533,"title":{},"body":{"index.html":{}}}],["tests",{"_index":530,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":540,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.logger.error(error.message",{"_index":338,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["this.slotsrepo.findone(id",{"_index":343,"title":{},"body":{"injectables/SlotsService.html":{}}}],["this.slotsrepo.save(slots",{"_index":331,"title":{},"body":{"injectables/SlotsService.html":{}}}],["this.slotsservice.addslots(slots",{"_index":285,"title":{},"body":{"controllers/SlotsController.html":{}}}],["this.slotsservice.listofslots(id",{"_index":290,"title":{},"body":{"controllers/SlotsController.html":{}}}],["this.userrepo.findoneorfail",{"_index":193,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersrepo.findone(id,{relations:['bookings",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.bookinghistory(id",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":196,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":234,"title":{},"body":{"classes/Slots.html":{}}}],["timestamp",{"_index":138,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["touch",{"_index":552,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":357,"title":{},"body":{"entities/Users.html":{}}}],["try",{"_index":192,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":557,"title":{},"body":{"index.html":{}}}],["type",{"_index":69,"title":{},"body":{"entities/Doctor.html":{},"classes/DoctorDTO.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Response.html":{},"injectables/ResponseInterceptor.html":{},"classes/Slots.html":{},"controllers/SlotsController.html":{},"classes/SlotsDTO.html":{},"injectables/SlotsService.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":81,"title":{},"body":{"entities/Doctor.html":{},"classes/Slots.html":{},"classes/SlotsRepository.html":{},"entities/Users.html":{},"classes/UsersRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([slotsrepository,slots",{"_index":310,"title":{},"body":{"modules/SlotsModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":415,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot(),usersmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["types/passport",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":516,"title":{},"body":{"index.html":{}}}],["ui",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["unable",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["undefined})@apiinternalservererrorresponse({description",{"_index":248,"title":{},"body":{"controllers/SlotsController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":259,"title":{},"body":{"controllers/SlotsController.html":{},"controllers/UsersController.html":{}}}],["undefined})@get(':id/bookings",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@get(':id/slots",{"_index":261,"title":{},"body":{"controllers/SlotsController.html":{}}}],["undefined})@post('slots",{"_index":250,"title":{},"body":{"controllers/SlotsController.html":{}}}],["unique",{"_index":367,"title":{},"body":{"entities/Users.html":{}}}],["unit",{"_index":529,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":177,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":410,"title":{},"body":{"modules/UsersModule.html":{}}}],["user",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{},"classes/UsersDTO.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user_already_exist",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_authenticated",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_not_found",{"_index":456,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_not_register",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_registerd",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepo",{"_index":172,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userrepository",{"_index":171,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["users",{"_index":85,"title":{"entities/Users.html":{}},"body":{"classes/DoctorDTO.html":{},"modules/SlotsModule.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"coverage.html":{}}}],["users.controller",{"_index":406,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.entity",{"_index":101,"title":{},"body":{"classes/DoctorDTO.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{}}}],["users.repository",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":368,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersdto",{"_index":384,"title":{"classes/UsersDTO.html":{}},"body":{"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersmodule",{"_index":35,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepo",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersrepository",{"_index":168,"title":{"classes/UsersRepository.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersservice",{"_index":377,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":165,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":173,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":176,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":100,"title":{},"body":{"classes/DoctorDTO.html":{},"classes/LoginDTO.html":{},"classes/SlotsDTO.html":{},"classes/UsersDTO.html":{},"dependencies.html":{}}}],["value",{"_index":324,"title":{},"body":{"injectables/SlotsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":568,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":121,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":524,"title":{},"body":{"index.html":{}}}],["website",{"_index":555,"title":{},"body":{"index.html":{}}}],["wil",{"_index":231,"title":{},"body":{"classes/Slots.html":{}}}],["world",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":545,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/SlotsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AppModule(Root Module)\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { SlotsModule } from './slots/slots.module';\n\n/**\n * AppModule(Root Module)\n */\n@Module({\n  imports: [TypeOrmModule.forRoot(),UsersModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Doctor.html":{"url":"entities/Doctor.html","title":"entity - Doctor","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Doctor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/doctors.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Doctor entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consultationFee\n                            \n                            \n                                description\n                            \n                            \n                                education\n                            \n                            \n                                experience\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                rating\n                            \n                            \n                                specialization\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        consultationFee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:49\n                        \n                    \n\n            \n                \n                    consultationFee\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:37\n                        \n                    \n\n            \n                \n                    description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        education\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:25\n                        \n                    \n\n            \n                \n                    education\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        experience\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:19\n                        \n                    \n\n            \n                \n                    experience\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:13\n                        \n                    \n\n            \n                \n                    id number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:55\n                        \n                    \n\n            \n                \n                    location\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:43\n                        \n                    \n\n            \n                \n                    rating\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        specialization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.entity.ts:31\n                        \n                    \n\n            \n                \n                    specialization\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n/**\n * Doctor entity\n */\n@Entity()\nexport class Doctor {\n\n    /**\n     * id number\n     */\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /**\n     * experience\n     */\n    @Column()\n    experience: string;\n\n    /**\n     * education\n     */\n    @Column()\n    education: string;\n\n    /**\n     * specialization\n     */\n    @Column()\n    specialization: string;\n\n    /**\n     * description\n     */\n    @Column()\n    description: string;\n\n    /**\n     * rating\n     */\n    @Column()\n    rating: number;\n\n    /**\n     * consultationFee\n     */\n    @Column()\n    consultationFee: number;\n\n    /**\n     * location\n     */\n    @Column()\n    location: string;\n\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DoctorDTO.html":{"url":"classes/DoctorDTO.html","title":"class - DoctorDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DoctorDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/doctors.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DoctorDTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consultationFee\n                            \n                            \n                                description\n                            \n                            \n                                education\n                            \n                            \n                                experience\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                rating\n                            \n                            \n                                specialization\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        consultationFee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: ConsultationFee shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:48\n                        \n                    \n\n            \n                \n                    consultationFee\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Description shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:36\n                        \n                    \n\n            \n                \n                    description\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        education\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Education shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:24\n                        \n                    \n\n            \n                \n                    education\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        experience\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Experience shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:18\n                        \n                    \n\n            \n                \n                    experience\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:12\n                        \n                    \n\n            \n                \n                    id:number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Location shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:54\n                        \n                    \n\n            \n                \n                    location\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Rating shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:42\n                        \n                    \n\n            \n                \n                    rating\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        specialization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Specialization shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:30\n                        \n                    \n\n            \n                \n                    specialization\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: Users shouldn't be empty})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/doctors.dto.ts:60\n                        \n                    \n\n            \n                \n                    users\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from \"class-validator\";\nimport { Users } from \"./users.entity\";\n\n/**\n * DoctorDTO\n */\nexport class DoctorDTO {\n\n    /**\n     * id:number\n     */\n    id: number;\n\n    /**\n     * experience\n     */\n    @IsNotEmpty({ message: `Experience shouldn't be empty` })\n    experience: string;\n\n    /**\n     * education\n     */\n    @IsNotEmpty({ message: `Education shouldn't be empty` })\n    education: string;\n\n    /**\n     * specialization\n     */\n    @IsNotEmpty({ message: `Specialization shouldn't be empty` })\n    specialization: string;\n\n     /**\n      * description\n      */\n    @IsNotEmpty({ message: `Description shouldn't be empty` })\n    description: string;\n\n    /**\n     * rating\n     */\n    @IsNotEmpty({ message: `Rating shouldn't be empty` })\n    rating: string;\n\n     /**\n      * consultationFee\n      */\n    @IsNotEmpty({ message: `ConsultationFee shouldn't be empty` })\n    consultationFee: string;\n\n    /**\n     * location\n     */\n    @IsNotEmpty({ message: `Location shouldn't be empty` })\n    location: string;\n\n    /**\n     * users\n     */\n    @IsNotEmpty({ message: `Users shouldn't be empty` })\n    users: Users;\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/coustom-exception/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Coustom Exception Filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/coustom-exception/http-exception.filter.ts:15\n                \n            \n\n\n            \n                \n                    Catch\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        HttpException\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n/**\n * Coustom Exception Filter\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n\n  /**\n   * Catch\n   * @param exception HttpException\n   * @param host \n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    /**\n     * response formate\n     */\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGard.html":{"url":"injectables/JwtAuthGard.html","title":"injectable - JwtAuthGard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtAuthGuard For Authentication\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * @author Rashmi Gupta\n * JwtAuthGuard For Authentication\n */\n@Injectable()\nexport class JwtAuthGard extends AuthGuard('jwt') { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/jwt/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtPayload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            emailId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emailId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    emailId should be a String\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload{\n\n    /**\n     * emailId should be a String\n     */\n    emailId:string;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/jwt/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/users/jwt/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Dependency -UserRepository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                userRepo\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/users/jwt/jwt.strategy.ts:30\n                \n            \n\n\n            \n                \n                    payload Validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { JwtPayload } from \"./jwt-payload.interface\";\nimport { UsersRepository } from \"../users.repository\";\n\n/**\n * @author Rashmi Gupta\n * JwtStrategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n    /**\n     * Dependency -UserRepository\n     * @param userRepo userRepo\n     */\n    constructor(private userRepo: UsersRepository) {\n        super({\n            secretOrKey: process.env.JWT_SECRET,\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n        });\n    }\n\n    /**\n     * payload Validation\n     * @param payload payload\n     * @returns response\n     */\n    async validate(payload: JwtPayload) {\n        try {\n            let response = this.userRepo.findOneOrFail({ emailId: payload.emailId });\n            return response;\n        } catch (error) {\n            throw new HttpException(error.message, HttpStatus.UNAUTHORIZED)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                LoginDTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emailId\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'emailId can not be empty'})@IsEmail({messge: 'emailId should be a email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/login.dto.ts:14\n                        \n                    \n\n            \n                \n                    Email should be string and not empty\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password can not be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    Password should be string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from \"class-validator\";\n\n/**\n * @author Rashmi Gupta\n * LoginDTO\n */\nexport class LoginDTO {\n\n    /**\n     * Email should be string and not empty\n     */\n    @IsNotEmpty({ message: 'emailId can not be empty' })\n    @IsEmail({messge:'emailId should be a email'})\n    emailId: string;\n\n    /**\n     * Password should be string\n     */\n    @IsNotEmpty({ message: 'Password can not be empty' })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Response Interceptor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Response Interceptor\n */\nexport interface Response {\n\n  /**\n   * Data\n   */\n  data: T;\n}\n/**\n * ResponseInterceptor\n */\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor> {\n  \n  /**\n   * Interceptor\n   * @param context ExecutionContext\n   * @param next CallHandler\n   * @returns Response\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                ResponseInterceptor\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptor/response.interceptor.ts:27\n                \n            \n\n\n            \n                \n                    Interceptor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ExecutionContext\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CallHandler\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        Response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Response Interceptor\n */\nexport interface Response {\n\n  /**\n   * Data\n   */\n  data: T;\n}\n/**\n * ResponseInterceptor\n */\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor> {\n  \n  /**\n   * Interceptor\n   * @param context ExecutionContext\n   * @param next CallHandler\n   * @returns Response\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Slots.html":{"url":"classes/Slots.html","title":"class - Slots","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Slots\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/slots/slots.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Slots Entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                doctor\n                            \n                            \n                                endTime\n                            \n                            \n                                id\n                            \n                            \n                                startTime\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        doctor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.entity.ts:18\n                        \n                    \n\n            \n                \n                    doctor wil be string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.entity.ts:30\n                        \n                    \n\n            \n                \n                    End Time will be a string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.entity.ts:12\n                        \n                    \n\n            \n                \n                    id will be pk\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.entity.ts:24\n                        \n                    \n\n            \n                \n                    Start Time will be a string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.entity.ts:36\n                        \n                    \n\n            \n                \n                    Status will be a string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, PrimaryGeneratedColumn } from \"typeorm\";\n\n/**\n * Slots Entity\n */\nexport class Slots {\n\n    /**\n     * id will be pk\n     */\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /**\n     * doctor wil be string\n     */\n    @Column()\n    doctor: string;\n\n    /**\n     * Start Time will be a string\n     */\n    @Column()\n    startTime: string;\n\n    /**\n     * End Time will be a string\n     */\n    @Column()\n    endTime: string;\n\n    /**\n     * Status will be a string\n     */\n    @Column()\n    status: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SlotsController.html":{"url":"controllers/SlotsController.html","title":"controller - SlotsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SlotsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/slots/slots.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                SlotsController\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSlots\n                            \n                            \n                                listOfslots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSlots\n                        \n                    \n                \n            \n            \n                \naddSlots(slots: SlotsDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({description: SLOT_ADD_SUCCESS, status: undefined})@ApiInternalServerErrorResponse({description: SLOT_CONFLICT, status: undefined})@Post('slots')\n                \n            \n\n            \n                \n                    Defined in src/slots/slots.controller.ts:28\n                \n            \n\n\n            \n                \n                    Add Benficiary\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slots\n                                    \n                                                SlotsDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Success or Failure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listOfslots\n                        \n                    \n                \n            \n            \n                \nlistOfslots(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: SLOT_CONFLICT, status: undefined})@ApiNotFoundResponse({description: SLOTS_NOT_AVAILABLE, status: undefined})@Get(':id/slots')\n                \n            \n\n            \n                \n                    Defined in src/slots/slots.controller.ts:40\n                \n            \n\n\n            \n                \n                    Get Benificiary By Id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Success or Failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { SlotsService } from \"./slots.service\";\nimport { ApiCreatedResponse, ApiInternalServerErrorResponse, ApiOkResponse, ApiTags, ApiNotFoundResponse } from \"@nestjs/swagger\";\nimport { Post, HttpStatus, ParseIntPipe, Get, Body, Controller, Param } from \"@nestjs/common\";\nimport { SLOT_ADD_SUCCESS, SLOT_CONFLICT, SLOTS_NOT_AVAILABLE } from \"src/constant\";\nimport { SlotsDTO } from \"./slots.dto\";\n\n/**\n * SlotsController\n */\n@ApiTags('Slots')\n@Controller()\nexport class SlotsController {\n\n    /**\n     * Dependency\n     * @param slotsService SlotsService\n     */\n    constructor(private readonly slotsService: SlotsService) { }\n\n    /**\n     * Add Benficiary\n     * @param benificiary BenificiaryDTO\n     * @returns Success or Failure\n     */\n    @ApiCreatedResponse({ description:SLOT_ADD_SUCCESS, status: HttpStatus.CREATED })\n    @ApiInternalServerErrorResponse({ description: SLOT_CONFLICT, status: HttpStatus.INTERNAL_SERVER_ERROR })\n    @Post(\"slots\")\n    addSlots(@Body() slots: SlotsDTO):Promise{\n        return this.slotsService.addSlots(slots)\n    }\n\n    /**\n     * Get Benificiary By Id\n     * @param id number\n     * @returns Success or Failure\n     */\n    @ApiOkResponse({description:SLOT_CONFLICT,status:HttpStatus.OK})\n    @ApiNotFoundResponse({description:SLOTS_NOT_AVAILABLE,status:HttpStatus.INTERNAL_SERVER_ERROR})\n    @Get(':id/slots')\n    listOfslots(@Param('id',ParseIntPipe)id:number):Promise{\n        return this.slotsService.listOfslots(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlotsDTO.html":{"url":"classes/SlotsDTO.html","title":"class - SlotsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlotsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/slots/slots.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Slots DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                doctor\n                            \n                            \n                                endTime\n                            \n                            \n                                id\n                            \n                            \n                                startTime\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        doctor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'doctor is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'endTime is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.dto.ts:12\n                        \n                    \n\n            \n                \n                    id will be pk\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'startTime is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'status is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.dto.ts:44\n                        \n                    \n\n            \n                \n                     @type string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\n/**\n *Slots DTO\n */\nexport class SlotsDTO {\n\n    /**\n     * id will be pk\n     * @type string\n     */\n    id: number;\n\n    /**\n     * @type string\n     * @field doctor\n     */\n    @IsString()\n    @IsNotEmpty({ message: 'doctor is not empty' })\n    doctor: string;\n\n    /**\n     * @type string\n     * @field startTime\n     */\n    @IsString()\n    @IsNotEmpty({ message: 'startTime is not empty' })\n    startTime: string;\n\n    /**\n     * @type string\n     * @field endTime\n     */\n    @IsString()\n    @IsNotEmpty({ message: 'endTime is not empty' })\n    endTime: string;\n\n    /**\n     *  @type string\n     * @field status\n     */\n    @IsString()\n    @IsNotEmpty({ message: 'status is not empty' })\n    status: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SlotsModule.html":{"url":"modules/SlotsModule.html","title":"module - SlotsModule","body":"\n                   \n\n\n\n\n    Modules\n    SlotsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SlotsModule\n\n\n\ncluster_SlotsModule_providers\n\n\n\n\nSlotsService\n\nSlotsService\n\n\n\nSlotsModule\n\nSlotsModule\n\nSlotsModule -->\n\nSlotsService->SlotsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/slots/slots.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            imported Modules -PassportModule,JwtModule,TypeOrmModule\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SlotsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SlotsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { SlotsRepository } from \"./slots.repository\";\nimport { Slots } from \"./slots.entity\";\nimport { SlotsController } from \"./slots.controller\";\nimport { SlotsService } from \"./slots.service\";\nimport { Module } from \"@nestjs/common\";\n\n/**\n * @author Rashmi Gupta\n * @Module Users Module\n *imported Modules -PassportModule,JwtModule,TypeOrmModule\n */\n@Module({ \n    imports: [TypeOrmModule.forFeature([SlotsRepository,Slots])\n    ],\n    controllers: [SlotsController],\n    providers: [SlotsService]\n})\nexport class SlotsModule { }    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlotsRepository.html":{"url":"classes/SlotsRepository.html","title":"class - SlotsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlotsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/slots/slots.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Slots Repository\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Slots } from \"./slots.entity\";\nimport { EntityRepository, Repository } from \"typeorm\";\n\n/**\n * Slots Repository\n */\n@EntityRepository(Slots)\nexport class SlotsRepository extends Repository{ } \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SlotsService.html":{"url":"injectables/SlotsService.html","title":"injectable - SlotsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SlotsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/slots/slots.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SlotsService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSlots\n                            \n                            \n                                    Async\n                                listOfslots\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(slotsRepo: SlotsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/slots/slots.service.ts:16\n                            \n                        \n\n                \n                    \n                            Dependency -\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        slotsRepo\n                                                  \n                                                        \n                                                                        SlotsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                SlotsRepository\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addSlots\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSlots(slots: SlotsDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/slots/slots.service.ts:28\n                \n            \n\n\n            \n                \n                    Add Slots\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slots\n                                    \n                                                SlotsDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        slotsDTO\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listOfslots\n                        \n                    \n                \n            \n            \n                \n                    \n                    listOfslots(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/slots/slots.service.ts:50\n                \n            \n\n\n            \n                \n                    List Of Slots\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SlotsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/slots/slots.service.ts:16\n                        \n                    \n\n            \n                \n                    Logger\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, ConflictException, NotFoundException } from \"@nestjs/common\";\nimport { SlotsDTO } from \"./slots.dto\";\nimport { SlotsRepository } from \"./slots.repository\";\nimport { SLOT_CONFLICT, SLOT_ADD_SUCCESS, SLOTS_NOT_AVAILABLE } from \"../constant\";\n\n/**\n * @author Rashmi Gupta\n * SlotsService\n */\n@Injectable()\nexport class SlotsService {\n\n     /**\n      * Logger\n      */\n    logger = new Logger(SlotsService.name);\n\n    /**\n     * Dependency -\n     * @param slotsRepo SlotsRepository\n     */\n    constructor(private slotsRepo: SlotsRepository){}\n\n    /**\n     * Add Slots\n     * @param slots slotsDTO\n     */\n    async addSlots(slots:SlotsDTO):Promise{\n        try{\n            const response =await this.slotsRepo.save(slots);\n            if(response) {\n                const msg:string = `${SLOT_ADD_SUCCESS}`;\n                return msg;\n            }else{\n               const msg:string=SLOT_CONFLICT;\n                throw new ConflictException(msg);\n            }\n        }catch(error){\n            this.logger.error(error.message);\n            if(error.errrno === 1062){\n                throw new ConflictException(SLOT_CONFLICT);\n            }\n        }\n    }\n\n   /**\n    * List Of Slots\n    * @param id number\n    */ \n   async listOfslots(id:number):Promise{\n       try{\n           const response = await this.slotsRepo.findOne(id);\n           if(response){\n               return response;\n           }else{\n               const msg :string=`${SLOTS_NOT_AVAILABLE}`;\n               throw new NotFoundException(msg);\n           }\n       }catch(error){\n           this.logger.error(error.message);\n           throw new NotFoundException(error.message)\n       }\n   }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                date\n                            \n                            \n                                emailId\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                ssn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ssn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, OneToOne, PrimaryGeneratedColumn, Entity } from \"typeorm\";\nimport { Doctor } from \"./doctors.entity\";\n\n@Entity()\nexport class Users {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    gender: string;\n\n    @Column()\n    age: number;\n\n    @Column({ unique: true })\n    emailId: string;\n\n    @Column()\n    phoneNumber: number;\n\n    @Column({ unique: true })\n    ssn: number;\n\n\n    @Column()\n    password: string;\n\n    @CreateDateColumn() \n    date: Date;\n\n   \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                User Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bookingHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bookingHistory\n                        \n                    \n                \n            \n            \n                \nbookingHistory(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: BOOKING_LIST, status: undefined})@ApiNotFoundResponse({description: NO_BOOKINGS_AVAILABLE, status: undefined})@Get(':id/bookings')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n                    Get Benificiary By Id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Success or Failure\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Param, ParseIntPipe } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse } from \"@nestjs/swagger\";\nimport { NO_BOOKINGS_AVAILABLE, BOOKING_LIST } from \"../constant\";\nimport { UsersService } from \"./users.service\";\n\n/**\n * @author Rashmi Gupta\n * User Controller\n */\n@Controller()\nexport class UsersController {\n\n    /**\n     * Dependency \n     * @param usersService UsersService\n     */\n    constructor(private readonly usersService: UsersService) { }\n/**\n     * Get Benificiary By Id\n     * @param id number\n     * @returns Success or Failure\n     */\n    @ApiOkResponse({description:BOOKING_LIST,status:HttpStatus.OK})\n    @ApiNotFoundResponse({description:NO_BOOKINGS_AVAILABLE,status:HttpStatus.INTERNAL_SERVER_ERROR})\n    @Get(':id/bookings')\n    bookingHistory(@Param('id',ParseIntPipe)id:number):Promise{\n        return this.usersService.bookingHistory(id);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersDTO.html":{"url":"classes/UsersDTO.html","title":"class - UsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                date\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                mailId\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                ssn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Age Name is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Gender Name is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mailId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email cant be empty'})@IsEmail({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'user Name is not empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'password cant be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Phonenumber cant be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ssn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'SSN cant be empty'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail, IsNumber } from \"class-validator\";\n\nexport class UsersDTO {\n\n    id: number\n\n    @IsNotEmpty({ message: 'user Name is not empty' })\n    name: string;\n\n\n    @IsNotEmpty({ message: 'Gender Name is not empty' })\n    gender: string;\n\n\n    @IsNotEmpty({ message: 'Age Name is not empty' })\n    age: number\n\n    @IsNotEmpty({ message: 'Email cant be empty' })\n    @IsEmail({})\n    mailId: string;\n\n    @IsNotEmpty({ message: 'Phonenumber cant be empty' })\n\n    phoneNumber: number;\n\n    @IsNotEmpty({ message: 'SSN cant be empty' })\n    @IsNumber()\n    ssn: number;\n\n    @IsNotEmpty({ message: 'password cant be empty' })\n    password: string;\n\n    date: Date\n\n    \n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            imported Modules -PassportModule,JwtModule,TypeOrmModule\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Users } from \"./users.entity\";\nimport { UsersRepository } from \"./users.repository\";\nimport { UsersService } from \"./users.service\";\nimport { UsersController } from \"./users.controller\";\n\n/**\n * @author Rashmi Gupta\n * @Module Users Module\n *imported Modules -PassportModule,JwtModule,TypeOrmModule\n */\n@Module({ \n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.registerAsync({\n            useFactory: () => ({\n                secret: process.env.JWT_SECRET,\n                signOptions: {\n                    expiresIn: '1d'\n                }\n            })\n        }),\n        TypeOrmModule.forFeature([Users, UsersRepository])\n    ],\n    controllers: [UsersController],\n    providers: [UsersService]\n})\nexport class UsersModule { } \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                User Repository\n\n            \n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport {  Users } from \"./users.entity\";\n\n/**\n * @author Rashmi Gupta\n * User Repository\n */\n@EntityRepository(Users)\nexport class UsersRepository extends Repository{ } \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                User Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookingHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepo: UsersRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            Dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepo\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                UsersRepository\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                JwtService\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        bookingHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingHistory(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n                    Booking History\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:20\n                        \n                    \n\n            \n                \n                    Logger\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, HttpException, HttpStatus, Injectable, InternalServerErrorException, Logger, UnauthorizedException, NotFoundException } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport * as bcrypt from 'bcryptjs';\nimport { INVALID_CREDENTIALS, USER_ALREADY_EXIST, USER_AUTHENTICATED, USER_NOT_REGISTER, USER_REGISTERD, NO_BOOKINGS_AVAILABLE } from \"../constant\";\nimport { JwtPayload } from \"./jwt/jwt-payload.interface\";\nimport { LoginDTO } from \"./login.dto\";\nimport { UsersDTO } from \"./users.dto\";\nimport { UsersRepository } from \"./users.repository\";\n\n/**\n * @author Rashmi Gupta\n * User Service\n */\n@Injectable()\nexport class UsersService {\n\n  /**\n   * Logger\n   */\n  logger = new Logger(UsersService.name);\n\n  /**\n   * Dependency\n   * @param usersRepo UsersRepository\n   * @param jwtService JwtService\n   */\n  constructor(private usersRepo: UsersRepository,\n    private jwtService: JwtService) { }\n\n  \n/**\n * Booking History\n * @param id number\n */\n  async bookingHistory(id:number):Promise{\n    try{\n        const response = await this.usersRepo.findOne(id,{relations:['bookings']});\n        if(response){\n            return response;\n        }else{\n            const msg :string=`${NO_BOOKINGS_AVAILABLE}`;\n            throw new NotFoundException(msg);\n        }\n    }catch(error){\n        this.logger.error(error.message);\n        throw new NotFoundException(error.message)\n    }\n}\n\n\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/coustom-exception/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptor/response.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptor/response.interceptor.ts\n            \n            interface\n            Response\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            BOOKING_LIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            INVALID_CREDENTIALS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            LOG_IN_SUCCESS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            NO_BOOKINGS_AVAILABLE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            SLOT_ADD_SUCCESS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            SLOT_CONFLICT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            SLOTS_NOT_AVAILABLE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            USER_ALREADY_EXIST\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            USER_AUTHENTICATED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            USER_NOT_FOUND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            USER_NOT_REGISTER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constant.ts\n            \n            variable\n            USER_REGISTERD\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/slots/slots.controller.ts\n            \n            controller\n            SlotsController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/slots/slots.dto.ts\n            \n            class\n            SlotsDTO\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/slots/slots.entity.ts\n            \n            class\n            Slots\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/slots/slots.repository.ts\n            \n            class\n            SlotsRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/slots/slots.service.ts\n            \n            injectable\n            SlotsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/doctors.dto.ts\n            \n            class\n            DoctorDTO\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/users/doctors.entity.ts\n            \n            entity\n            Doctor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/jwt/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/jwt/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/login.dto.ts\n            \n            class\n            LoginDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            UsersDTO\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.1.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            fastify-swagger : ^4.13.1\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SlotsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_SlotsModule\n\n\n\ncluster_SlotsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSlotsService\n\nSlotsService\n\n\n\nSlotsModule\n\nSlotsModule\n\nSlotsModule -->\n\nSlotsService->SlotsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BOOKING_LIST   (src/.../constant.ts)\n                        \n                        \n                            INVALID_CREDENTIALS   (src/.../constant.ts)\n                        \n                        \n                            LOG_IN_SUCCESS   (src/.../constant.ts)\n                        \n                        \n                            NO_BOOKINGS_AVAILABLE   (src/.../constant.ts)\n                        \n                        \n                            SLOT_ADD_SUCCESS   (src/.../constant.ts)\n                        \n                        \n                            SLOT_CONFLICT   (src/.../constant.ts)\n                        \n                        \n                            SLOTS_NOT_AVAILABLE   (src/.../constant.ts)\n                        \n                        \n                            USER_ALREADY_EXIST   (src/.../constant.ts)\n                        \n                        \n                            USER_AUTHENTICATED   (src/.../constant.ts)\n                        \n                        \n                            USER_NOT_FOUND   (src/.../constant.ts)\n                        \n                        \n                            USER_NOT_REGISTER   (src/.../constant.ts)\n                        \n                        \n                            USER_REGISTERD   (src/.../constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOOKING_LIST\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `here is your booking list`\n                    \n                \n\n            \n                \n                    BOOKING_LIST\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INVALID_CREDENTIALS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `INVALID CREDENTIALS`\n                    \n                \n\n            \n                \n                    INVALID_CREDENTIALS\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOG_IN_SUCCESS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `User Login Successfull with id :`\n                    \n                \n\n            \n                \n                    LOG_IN_SUCCESS\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NO_BOOKINGS_AVAILABLE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `No bokkings available with this Id :`\n                    \n                \n\n            \n                \n                    NO_BOOKINGS_AVAILABLE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SLOT_ADD_SUCCESS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `Slot Added successfully with Id :`\n                    \n                \n\n            \n                \n                    SLOT_ADD_SUCCESS\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SLOT_CONFLICT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `This slot is already booked, please try for other slots`\n                    \n                \n\n            \n                \n                    SLOT_CONFLICT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SLOTS_NOT_AVAILABLE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `Sorry,this Slot is not available`\n                    \n                \n\n            \n                \n                    SLOTS_NOT_AVAILABLE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ALREADY_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `USER ALREADY EXIST`\n                    \n                \n\n            \n                \n                    USER_ALREADY_EXIST\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_AUTHENTICATED\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `USER AUTHENTICATED SUCCESFULLY`\n                    \n                \n\n            \n                \n                    USER_AUTHENTICATED\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_NOT_FOUND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `USER NOT FOUND`\n                    \n                \n\n            \n                \n                    USER_NOT_FOUND\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_NOT_REGISTER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `UNABLE TO REGISTER USER TRY AGAIN LATER`\n                    \n                \n\n            \n                \n                    USER_NOT_REGISTER\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_REGISTERD\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `USER REGISTERD SUCCESSFULLY WITH id:`\n                    \n                \n\n            \n                \n                    USER_REGISTERD\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
