import { Bookings } from "../bookings/bookings.entity";
import { Slots } from "../slots/slots.entity";
import { Column, CreateDateColumn, Entity, JoinColumn, OneToMany, OneToOne, PrimaryGeneratedColumn } from "typeorm";
import { Doctors } from "./doctors/doctors.entity";
import { Role } from "./role.enum";

/**
 * users entity class
 */
@Entity()
export class Users {
  /**
   * @type : number
   * primary key and its auto generated by database
   */
  @PrimaryGeneratedColumn()
  id: number;

  /**
   * @type:string
   * accepts the string value
   */
  @Column()
  name: string;

  /**
   * @type:string
   * accepts the string value
   */
  @Column()
  gender: string;

  /**
   * @type:string
   * accepts the string value
   */
  @Column()
  age: number;

  /**
   * @type:string
   * accepts the string value
   */
  @Column({ unique: true })
  emailId: string;

  /**
   * @type:number
   * accepts the integer value
   */
  @Column()
  phoneNumber: number;

  /**
   * @type:number
   * accepts the integer value
   */
  @Column({ unique: true })
  ssn: number;

  /**
   * @type:string
   * accepts the string value
   */
  @Column()
  password: string;

  /**
   * @type:date
   */
  @CreateDateColumn()
  date: Date;

  /**
   * @type:enum
   * const value
   */
  @Column({ type: 'enum', enum: Role, default: Role.User })
  role: Role;

  /**
   * Relation between profile and register(one to one)
   */
  @OneToOne(() => Doctors, doctor => doctor.users)
  doctor: Doctors;

  /**
    * Relation between books and user
    */
  @OneToMany(() => Slots, slots => slots.users)
  slots: Slots[]

  /**
   * Relation between bookings and users
   */
  @OneToMany(() => Bookings, bookings => bookings.users)
  bookings: Bookings[];
}